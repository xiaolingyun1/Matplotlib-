import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from scipy.integrate import odeint

# define van de Pol oscillator
def vdp(y,t,mu):
    y1, y2 = y
    dydt = [y2,mu*(1-y1*y1)*y2-y1]
    return dydt


# set initial conditions
y0 = [0.5,0]
init_mu = 0.5
t = np.linspace(0,60,1000)

# solve van de Pol oscillator
def solve(mu):
    sol = odeint(vdp, y0, t, args=(mu,), rtol=1e-10, atol=1e-12)    #
    y1,y2 = sol.T # y1 = y, y2 = y'
    return [y1, y2]


# Create the figure and the line that we will manipulate
fig, ax = plt.subplots()
line, = ax.plot(solve(init_mu)[0], solve(init_mu)[1], lw=2) 
ax.set_xlabel("y(x)")
ax.set_ylabel("y'(x)")
ax.set_title(" Limit cycle of Van de Pol's equation")


# adjust the main plot to make room for the slider
fig.subplots_adjust(left=0.13,bottom=0.25)

# Make a horizontal slider to control the frequency.
axmu = fig.add_axes([0.14, 0.1, 0.68, 0.03])
mu_slider = Slider(
    ax=axmu,
    label='mu',
    valmin=0.01,
    valmax=2,
    valinit=init_mu,
)

def update(val):
    line.set_xdata(solve(mu_slider.val)[0])
    line.set_ydata(solve(mu_slider.val)[1])
    fig.canvas.draw_idle()

# register the update function with slider
mu_slider.on_changed(update)

plt.show()
